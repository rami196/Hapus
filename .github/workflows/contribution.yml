name: Unified Multi-Account Workflow (Full + Optimized)

on:
  workflow_dispatch:
    inputs:
      repo_prefix:
        description: 'Prefix nama repository (contoh: rixz)'
        default: ''
      repo_count:
        description: 'Jumlah repository per akun'
        default: 25
      total_commits:
        description: "Jumlah total commit per akun"
        default: 1
      total_days:
        description: "Jumlah hari pembagian commit"
        default: 90
      total_prs:
        description: "Jumlah Pull Request per akun"
        default: 1
      total_issues:
        description: "Jumlah Issue per akun"
        default: 1
      target_repo:
        description: "Repository utama (contoh: username/activity-hub)"
        default: "rami196/hapus"

jobs:
  unified:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 8   # ⚡ lebih cepat tapi tetap aman
      matrix:
        include:
          - account: rami196
            email: 15175497+rami196@users.noreply.github.com
            token_secret: PAT1
          - account: rgmauer
            email: 15880189+rgmauer@users.noreply.github.com
            token_secret: PAT2
          - account: mustafasag
            email: 20033463+mustafasag@users.noreply.github.com
            token_secret: PAT3  
            
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Delay antar akun agar job tidak bentrok
      - name: Delay before start
        run: |
          DELAY=$((10 + RANDOM % 15))
          echo "🕒 Menunggu $DELAY detik sebelum memulai akun ${{ matrix.account }}..."
          sleep $DELAY

      # === STEP 1: Clone target repo dan setup git identity ===
      - name: Clone target repo
        env:
          GH_TOKEN: ${{ secrets[matrix.token_secret] }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
        run: |
          git clone https://x-access-token:${GH_TOKEN}@github.com/$TARGET_REPO repo
          cd repo
          git config user.name "${{ matrix.account }}"
          git config user.email "${{ matrix.email }}"
          echo "✅ Git identity diatur untuk ${{ matrix.account }}"

      # === STEP 2: Generate commits ===
      - name: Generate commits
        env:
          TOTAL_COMMITS: ${{ github.event.inputs.total_commits }}
          TOTAL_DAYS: ${{ github.event.inputs.total_days }}
          GH_TOKEN: ${{ secrets[matrix.token_secret] }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
        run: |
          cd repo
          mkdir -p logs
          COMMITS_PER_DAY=$((TOTAL_COMMITS / TOTAL_DAYS))
          START_DATE=$(date -d "$TOTAL_DAYS days ago" +%Y-%m-%d)
          echo "📊 Membuat $TOTAL_COMMITS commit selama $TOTAL_DAYS hari..."

          for ((day=0; day<TOTAL_DAYS; day++)); do
            DATE_STR=$(date -d "$START_DATE +$day days" +%Y-%m-%d)
            for ((i=1; i<=COMMITS_PER_DAY; i++)); do
              echo "Commit $i oleh ${{ matrix.account }} pada $DATE_STR" >> logs/${{ matrix.account }}_$day.txt
              git add logs/${{ matrix.account }}_$day.txt
              GIT_COMMITTER_DATE="$DATE_STR 12:00:00" \
              GIT_AUTHOR_DATE="$DATE_STR 12:00:00" \
              git commit -m "Auto commit $i by ${{ matrix.account }}" || true
            done
          done

          echo "🚀 Push commit..."
          for attempt in {1..3}; do
            git push --force https://x-access-token:${GH_TOKEN}@github.com/$TARGET_REPO HEAD:main && break || sleep 3
          done
          echo "✅ Commits selesai dipush!"

      # === STEP 3: Create Pull Requests & Issues (Optimized Delay) ===
      - name: Create PRs & Issues
        env:
          GH_TOKEN: ${{ secrets[matrix.token_secret] }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
          TOTAL_PRS: ${{ github.event.inputs.total_prs }}
          TOTAL_ISSUES: ${{ github.event.inputs.total_issues }}
        run: |
          cd repo
          echo "🔀 Membuat $TOTAL_PRS PR dan $TOTAL_ISSUES Issue di $TARGET_REPO..."

          pr_success=0
          issue_success=0

          # === Buat Pull Requests lebih cepat ===
          for i in $(seq 1 $TOTAL_PRS); do
            branch="auto-${{ matrix.account }}-pr-$i-$(date +%s)"
            echo "Pull request #$i by ${{ matrix.account }}" > pr_${{ matrix.account }}_$i.txt
            git checkout -B $branch
            git add pr_${{ matrix.account }}_$i.txt
            git commit -m "PR otomatis #$i oleh ${{ matrix.account }}" || true
            git push -f https://x-access-token:${GH_TOKEN}@github.com/$TARGET_REPO HEAD:$branch
            gh pr create \
              --title "PR #$i dari ${{ matrix.account }}" \
              --body "PR otomatis oleh ${{ matrix.account }}" \
              --base main --head $branch \
              --repo $TARGET_REPO >/dev/null 2>&1 && pr_success=$((pr_success + 1)) || true
            sleep 0.6  # optimized
          done

          # === Buat Issues lebih cepat ===
          for i in $(seq 1 $TOTAL_ISSUES); do
            gh issue create \
              --title "Issue #$i dari ${{ matrix.account }}" \
              --body "Auto-generated issue $i oleh ${{ matrix.account }}" \
              --repo $TARGET_REPO >/dev/null 2>&1 && issue_success=$((issue_success + 1)) || true
            sleep 0.4  # optimized
          done

          echo "📊 PR sukses: $pr_success | Issue sukses: $issue_success"

      # === STEP 4: Auto Create Repositories ===
      - name: Create repositories automatically
        env:
          PAT_TOKEN: ${{ secrets[matrix.token_secret] }}
        run: |
          set -euo pipefail
          WORDS=("quantum" "nova" "lumen" "matrix" "orbit" "vector" "sigma" "neon" "delta" "aero" "fusion" "zenith")
          SUFFIX=("project" "service" "system" "app" "engine" "hub" "core" "cloud" "framework")
          LANGS=("Python" "C++" "Go" "Swift" "Java" "JavaScript" "Ruby")
          EXT=("py" "cpp" "go" "swift" "java" "js" "rb")
          CONTENTS=(
            "print('Hello from Python!')"
            "#include <iostream>\nint main(){std::cout << \"Hello from C++!\"; return 0;}"
            "package main\nimport \"fmt\"\nfunc main(){fmt.Println(\"Hello from Go!\")}"
            "print(\"Hello from Swift!\")"
            "public class Main { public static void main(String[] args){ System.out.println(\"Hello from Java!\"); } }"
            "console.log('Hello from JavaScript!');"
            "puts 'Hello from Ruby!'"
          )

          PREFIX=${{ github.event.inputs.repo_prefix }}
          COUNT=${{ github.event.inputs.repo_count }}

          git config --global user.name "${{ matrix.account }}"
          git config --global user.email "${{ matrix.email }}"

          echo "=== [${{ matrix.account }}] Auto membuat $COUNT repositori ==="

          for i in $(seq 1 $COUNT); do
            NAME="${PREFIX}-${WORDS[$RANDOM % ${#WORDS[@]}]}-${SUFFIX[$RANDOM % ${#SUFFIX[@]}]}"
            LANG_INDEX=$((RANDOM % ${#LANGS[@]}))
            LANG=${LANGS[$LANG_INDEX]}
            FILE_EXT=${EXT[$LANG_INDEX]}
            FILE_CONTENT=${CONTENTS[$LANG_INDEX]}
            FILE_NAME="main.${FILE_EXT}"

            echo "📦 [$i/$COUNT] Membuat repo: $NAME ($LANG)"
            response=$(curl -s -H "Authorization: token $PAT_TOKEN" \
              -d "{\"name\":\"$NAME\",\"auto_init\":true}" \
              https://api.github.com/user/repos)

            if echo "$response" | grep -q '"full_name"'; then
              echo "✅ Repository berhasil dibuat: $NAME"
            else
              echo "⚠️ Gagal membuat repository $NAME"
              continue
            fi

            sleep 2
            git clone https://x-access-token:${PAT_TOKEN}@github.com/${{ matrix.account }}/$NAME.git
            cd $NAME
            printf "%b\n" "$FILE_CONTENT" > $FILE_NAME
            git add .
            git commit -m "Initial commit ($LANG)"
            git push origin main --force
            cd ..
            rm -rf $NAME
          done
          echo "✅ Semua repo selesai dibuat!"
